TO DO:

1) simple readme
2) changelog
	>renumerate older prog versions to zeta.0.00.00
	>Main version & master change log tracking
	    0.00.00
	    Version_Code.Sub_Prog.MinorTweaks
		Version_Code: change if sig change in UI or functionality
		Sub_Prog: change if a sub program changes full version #
			global and incremental
		MinorTweaks: spelling, formatting displays, etc. 
		Use of "b" prior to Version is beta testing version 
	>Sub programs version and internal change logs
	    00.00
	    Version_Code.MinorChanges
	    	Version_Code: change if sig alteration in input or output
	    	MinorChanges: change if as needed for code or spelling changes
	    		also used in event another prog causes small redo 
	    		like change in variable names coming in


Wishlist:

) Stream linecode 0
   Seperate config && prog folders integrate changes as needed 
	>Make "prog-hm" & prog-cm (for common; potential "prog-srv" later)
		> prog-cm = programs no change or use of config needed to reuse (global)
		> prog-(hm/srv) = can't simply use diff. config to reuse
	>Make "conf-HM" (potential "conf-SRV" later)
		>no conf-cm as config is prog specific. 
	>Reassess Programs' internal validity 
		>Make Master prog in code, all others next dir.
		>Seperate var to be reusable or custom
			>create com for common variables (in all my progs)
			>uni =variables to use w/ run/master as needed
		>clarify variable names throughout - master list
		>re-adjust Sp# spacer variable (so _ isn't disallowed in home/* names) 
			>create a system check for that?

) Prog for array making?
	1) anyway to speficy array name after for loop? 
		maybe specify some in each config that needs?
	2) anyway to only have one FldA option byt modify my line (indicator code?)?
	3) more procedural in chioces, simpler in var, and easier to add new main progs

) streamline code 1


) Small prog for checking if drives mounted in specific (constant) location
	1) use: sed -n '/#start/,/#end/p' config.sh
		pull content labeled #start to #end of bash file  	
	2) small utility for opening or closing crypt drives (runs inside RUN no dialog)
		>lsblk -e7 -o NAME,LABEL,MOUNTPOINT,TYPE,uuid,name,SIZE
		>idk hand entry?
	3) partition mount check prog
		>New config for drives labels, mntpoint, & uuid
		>Write computer side setup instructions
		>Darcy Double Check, search for file with uuid on location
		>if found provide list for choices for use in new dialog

) add proper Redo and Cancel options, with loops
#hence forth cancel restoration, extra addition in place of redo.
#nested loops (break n) n=nested loops to break.
	) Add "Redo" - 1 loop for: location, user/input, program, folders

	) Add dialog loop for location in dest or not
		>If not in dest > Select dest from drives that pass check
		>If in dest > usual prompt to verify
		>extra button is redo, cancel actually cancels 
		3 windows (y/n for in location, radio for drive select, confirmation)
	
	) Confirm Folder Options - Confirm, Redo, Cancel
		Redo can go back to folders and program

	) reprint final info on double check
		>add each prog version (including master)
		>Extra = New radiolist for Redo + each layer back)
		
) streamline code 2 
	
) check that inert and live rsync and tar match
	both should: 
	>Check for unique dest folder specified from var
	>Check consistency in outputs

) add code option for inert running 
	>Have this change master vers number so final confirmation prints
	>Dialog should actually be pulled by seperate head prog
	>Master inert flag goes there to progs 
		>RS, TAR, Dialog, etc. can all read it read it
		>Master prog manages 
			>inert flag coding, 
			>load var
			>setting prgnm (rm from var)
			>making appropriately named log files
			>clearing temp files
		
	
) Make a readme user guide

) improve documentation (comments, change logs, howto: advanced changes, etc)

) tidy code, potentially make more prog/config as needed

) server backup program (more steps as needed)
	>hard switch in Master prog
	>Obviously different config files (diff names & loc)
	>Try not to alter progs too much
		>Resuse as much code as possible
		>common progs reuse in state
		>altered or unique to be renamed

) improve TX.sh on server
	> simplify opening vs clossing ssh password in mini-script
	> 




